.\" Generated by scdoc 1.11.3
.\" Complete documentation for this program is not available as a GNU info page
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.nh
.ad l
.\" Begin generated content:
.TH "OCHAMI-SMD" "1" "2024-11-22" "OpenCHAMI" "Manual Page for ochami-smd"
.PP
.SH NAME
.PP
ochami-smd - Communicate with the State Management Database (SMD)
.PP
.SH SYNOPSIS
.PP
ochami smd [OPTIONS] COMMAND
.PP
.SH DATA STRUCTURE
.PP
SMD uses several data structures depending on which endpoint is being used.\&
.PP
.SS ComponentEndpoint
.PP
The \fBComponentEndpoint\fR is the sort of "glue" between the \fBComponent\fR and
\fBRedfishEndpoint\fR.\&
.PP
Below is an example of a single \fBComponentEndpoint\fR in JSON form.\& Note that the
data structure is a single \fBComponentEndpoints\fR object containing an array.\&
.PP
.nf
.RS 4
{
  "ComponentEndpoints": [
    {
      "ID": "x0c0s0b0n0",
      "Type": "Node",
      "Domain": "mgmt\&.example\&.domain\&.com",
      "FQDN": "x0c0s0b0n0\&.mgmt\&.example\&.domain\&.com",
      "RedfishType": "ComputerSystem",
      "RedfishSubtype": "Physical",
      "ComponentEndpointType": "ComponentEndpointComputerSystem",
      "MACAddr": "d0:94:66:00:aa:37",
      "UUID": "bf9362ad-b29c-40ed-9881-18a5dba3a26b",
      "OdataID": "/redfish/v1/Systems/System\&.Embedded\&.1",
      "RedfishEndpointID": "x0c0s0b0",
      "RedfishEndpointFQDN": "x0c0s0b0\&.mgmt\&.example\&.domain\&.com",
      "RedfishURL": "x0c0s0b0\&.mgmt\&.example\&.domain\&.com/redfish/v1/Systems/System\&.Embedded\&.1",
      "RedfishSystemInfo": {
        "Name": "System Embedded 1",
        "Actions": {
          "#ComputerSystem\&.Reset": {
            "AllowableValues": [
              "On",
              "ForceOff"
            ],
            "target": "/redfish/v1/Systems/System\&.Embedded\&.1/Actions/ComputerSystem\&.Reset"
          }
        },
        "EthernetNICInfo": [
          {
            "RedfishId": "1",
            "@odata\&.id": "/redfish/v1/Systems/System\&.Embedded\&.1/EthernetInterfaces/1",
            "Description": "Management Network Interface",
            "InterfaceEnabled": true,
            "MACAddress": "d0:94:66:00:aa:37,",
            "PermanentMACAddress": "d0:94:66:00:aa:37"
          },
          {
            "RedfishId": "2",
            "@odata\&.id": "/redfish/v1/Systems/System\&.Embedded\&.1/EthernetInterfaces/2",
            "Description": "Management Network Interface",
            "InterfaceEnabled": true,
            "MACAddress": "d0:94:66:00:aa:38",
            "PermanentMACAddress": "d0:94:66:00:aa:38"
          }
        ]
      }
    }
  ]
}
.fi
.RE
.PP
.SS Component
.PP
The \fBComponent\fR object contains information for a device.\& This can be a \fINode\fR,
\fINodeBMC\fR, or other type.\&
.PP
Below is an example of a single \fBComponent\fR in JSON form.\& Note that the
structure contains a single \fBComponents\fR object containing an array.\&
.PP
.nf
.RS 4
{
  "Components": [
    {
      "ID": "x0c0s0b0n0",
      "Type": "Node",
      "State": "Ready",
      "Flag": "OK",
      "Enabled": true,
      "SoftwareStatus": "string",
      "Role": "Compute",
      "SubRole": "Worker",
      "NID": 1,
      "Subtype": "string",
      "NetType": "Sling",
      "Arch": "X86",
      "Class": "River",
      "ReservationDisabled": false,
      "Locked": false
    }
  ]
}
.fi
.RE
.PP
.SS Group
.PP
The \fBGroup\fR keeps track of \fBComponent\fR objects organized within groups in SMD.\&
.PP
Below is an example of a single \fBGroup\fR in JSON form.\&
.PP
.nf
.RS 4
[
  {
    "label": "blue",
    "description": "This is the blue group",
    "tags": [
      "optional_tag1",
      "optional_tag2"
    ],
    "exclusiveGroup": "optional_excl_group",
    "members": {
      "ids": [
        "x1c0s1b0n0",
        "x1c0s1b0n1",
        "x1c0s2b0n0",
        "x1c0s2b0n1"
      ]
    }
  }
]
.fi
.RE
.PP
.SS EthernetInterface
.PP
The \fBEthernetInterface\fR contains information on a network interface for a
\fBComponent\fR.\&
.PP
Below is an example of a single \fBEthernetInterface\fR in JSON form.\&
.PP
.nf
.RS 4
[
  {
    "ID": "a4bf012b7310",
    "Description": "string",
    "MACAddress": "string",
    "IPAddresses": [
      {
        "IPAddress": "10\&.252\&.0\&.1",
        "Network": "HMN"
      }
    ],
    "LastUpdate": "2020-05-13T19:18:45\&.524974Z",
    "ComponentID": "x0c0s1b0n0",
    "Type": "Node"
  }
]
.fi
.RE
.PP
.SS RedfishEndpoint
.PP
The \fBRedfishEndpoint\fR contains information about a \fBComponent\fR'\&s BMC that has
been discovered, e.\&g.\& by \fImagellan\fR.\&
.PP
Below is an example of a single \fBRedfishEndpoint\fR in JSON form.\& Note that the
structure contains a single \fBRedfishEndpoints\fR object containing an array.\&
.PP
.nf
.RS 4
{
  "RedfishEndpoints": [
    {
      "ID": "x0c0s0b0",
      "Type": "Node",
      "Name": "string",
      "Hostname": "string",
      "Domain": "string",
      "FQDN": "string",
      "Enabled": true,
      "UUID": "bf9362ad-b29c-40ed-9881-18a5dba3a26b",
      "User": "string",
      "Password": "string",
      "UseSSDP": true,
      "MacRequired": true,
      "MACAddr": "ae:12:e2:ff:89:9d",
      "IPAddress": "10\&.254\&.2\&.10",
      "RediscoverOnUpdate": true,
      "TemplateID": "string",
      "DiscoveryInfo": {
        "LastAttempt": "2024-11-20T19:05:44\&.253Z",
        "LastStatus": "EndpointInvalid",
        "RedfishVersion": "string"
      }
    }
  ]
}
.fi
.RE
.PP
.SH COMMANDS
.PP
.SS compep
.PP
Manage component endpoints.\&
.PP
Subcommands for this command are as follows:
.PP
\fBdelete\fR [--force] --all
.br
\fBdelete\fR [--force] \fIxname\fR.\&.\&.\&
.br
\fBdelete\fR [--force] -f \fIfile\fR [--payload-format \fIformat\fR]
.br
\fBdelete\fR [--force] -f \fI-\fR [--payload-format \fIformat\fR]
.RS 4
Delete one or more component endpoints.\& Unless \fB--force\fR is passed, the user
is asked to confirm deletion.\&
.PP
In the first form of the command, all component endpoints are deleted.\& \fBBE
CAREFUL!\&\fR
.PP
In the second form of the command, one or more xnames identifying the
component(s) whose component endpoint(s) to delete is/are specified.\&
.PP
In the third form of the command, a file containing the payload data (see
the \fBComponentEndpoint\fR data structure above) is passed.\& This is convenient
in cases of dealing with many component endpoints at once.\&
.PP
In the fourth form of the command, the payload data is read from standard
input.\&
.PP
This command sends one or more DELETE requests to SMD'\&s /ComponentEndpoints
endpoint.\&
.PP
This command accepts the following options:
.PP
\fB-a, --all\fR
.RS 4
Delete \fBall\fR component endpoints in SMD.\& \fBBE CAREFUL!\&\fR
.PP
.RE
\fB--force\fR
.RS 4
Do not ask the user to confirm deletion.\& Use with caution.\&
.PP
.RE
\fB-f, --payload\fR \fIfile\fR
.RS 4
Specify a file containing the data to send to SMD.\& The format of this
file depends on \fI--payload-format\fR and is \fIjson\fR by default.\& If \fB-\fR is
used as the argument to \fI-f\fR, the command reads the payload data from
standard input.\&
.PP
.RE
\fB--payload-format\fR \fIformat\fR
.RS 4
Format of the file used with \fI-f\fR.\& If unspecified, the payload format is
\fIjson\fR by default.\& Supported formats are: \fIyaml\fR.\&
.PP
.RE
.RE
\fBget\fR [\fIxname\fR].\&.\&.\&
.RS 4
Get all or a subset of component endpoints.\&
.PP
If no arguments are passed, all component endpoints are returned.\& Otherwise,
the results are filtered by one or more passed xnames.\&
.PP
This command sends a GET request to SMD'\&s /ComponentEndpoints endpoint.\&
.PP
.RE
.SS component
.PP
Manage components.\&
.PP
Subcommands for this command are as follows:
.PP
\fBadd\fR [--arch \fIarch\fR] [--enabled] [--role \fIrole\fR] [--state \fIstate\fR] \fIxname\fR \fInode_id\fR
.br
\fBadd\fR -f \fIfile\fR [--payload-format \fIformat\fR]
.br
\fBadd\fR -f \fI-\fR [--payload-format \fIformat\fR]
.RS 4
Add one or more new components to SMD.\& If a component already exists with
the same xname, this command will fail.\&
.PP
In the first form of the command, an \fIxname\fR and \fInode_id\fR is required to
identify the component to add.\& One or more of \fB--arch\fR, \fB--enabled\fR,
\fB--role\fR, or \fB--state\fR can optionally be specified to specify details of the
component.\&
.PP
In the second form of the command, a file containing the payload data is
passed.\& This is convenient in cases of dealing with many components at once.\&
.PP
In the third form of the command, the payload data is read from standard
input.\&
.PP
This command sends a POST request to SMD'\&s /Components endpoint.\&
.PP
This command accepts the following options:
.PP
\fB--arch\fR \fIarch\fR
.RS 4
Specify CPU architecture of component.\&
.PP
Default: \fBX86\fR
.PP
.RE
\fB--enabled\fR
.RS 4
Specify if component is shows up as enabled in SMD.\&
.PP
Default: \fBtrue\fR
.PP
.RE
\fB-f, --payload\fR \fIfile\fR
.RS 4
Specify a file containing the data to send to SMD.\& The format of this
file depends on \fI--payload-format\fR and is \fIjson\fR by default.\& If \fB-\fR is
used as the argument to \fI-f\fR, the command reads the payload data from
standard input.\&
.PP
.RE
\fB--payload-format\fR \fIformat\fR
.RS 4
Format of the file used with \fI-f\fR.\& If unspecified, the payload format is
\fIjson\fR by default.\& Supported formats are: \fIyaml\fR.\&
.PP
.RE
\fB--role\fR \fIrole\fR
.RS 4
Specify the SMD role for the new component.\&
.PP
Default: \fBCompute\fR
.PP
.RE
\fB--state\fR \fIstate\fR
.RS 4
Specify the initial state of the new component.\&
.PP
Default: \fBReady\fR
.PP
.RE
.RE
\fBdelete\fR --all
.br
\fBdelete\fR \fIxname\fR.\&.\&.\&
.br
\fBdelete\fR -f \fIfile\fR [--payload-format \fIformat\fR]
.br
\fBdelete\fR -f \fI-\fR [--payload-format \fIformat\fR]
.RS 4
Delete one or more components in SMD.\& Unless \fB--force\fR is passed, the user
is asked to confirm deletion.\&
.PP
In the first form of the command, all components are deleted.\& \fBBE CAREFUL!\&\fR
.PP
In the second form of the command, one or more xnames identifying the
component(s) to delete is/are specified.\&
.PP
In the third form of the command, a file containing the payload data (see
the \fBComponent\fR data structure above) is passed.\& This is convenient in cases
of dealing with many components at once.\&
.PP
In the fourth form of the command, the payload is read from standard input.\&
.PP
This command sends one or more DELETE requests to SMD'\&s /Components
endpoint.\&
.PP
This command accepts the following options:
.PP
\fB-a, --all\fR
.RS 4
Delete \fBall\fR components in SMD.\& \fBBE CAREFUL!\&\fR
.PP
.RE
\fB--force\fR
.RS 4
Do not ask the user to confirm deletion.\& Use with caution.\&
.PP
.RE
\fB-f, --payload\fR \fIfile\fR
.RS 4
Specify a file containing the data to send to SMD.\& The format of this
file depends on \fI--payload-format\fR and is \fIjson\fR by default.\& If \fB-\fR is
used as the argument to \fI-f\fR, the command reads the payload data from
standard input.\&
.PP
.RE
\fB--payload-format\fR \fIformat\fR
.RS 4
Format of the file used with \fI-f\fR.\& If unspecified, the payload format is
\fIjson\fR by default.\& Supported formats are: \fIyaml\fR.\&
.PP
.RE
.RE
\fBget\fR [--nid \fInid\fR] [--xname \fIxname\fR]
.RS 4
Get all components or one identified by xname or node ID.\&
.PP
If no flags are passed, all components are returned.\& Otherwise, the
component specified by the passed filter flag(s) is returned.\&
.PP
This command sends a GET request to SMD'\&s /Components endpoint.\&
.PP
.RE
.SS group
.PP
Manage SMD groups.\& For managing group membership, see \fBgroup member\fR below.\&
.PP
Subcommands for this command are as follows:
.PP
\fBadd\fR [--description \fIdesc\fR] [--tag \fItag\fR,.\&.\&.\&] [--member \fIxname\fR,.\&.\&.\&] [--exclusive-group \fIgroup\fR] \fIgroup_name\fR
.br
\fBadd\fR -f \fIfile\fR [--payload-format \fIformat\fR]
.br
\fBadd\fR -f \fI-\fR [--payload-format \fIformat\fR]
.RS 4
Add a new group to SMD, optionally specifying members to add to the group.\&
.PP
In the first form of the command, a \fIgroup_name\fR is required to create the
new group.\& An optional group description can be specified with
\fB--description\fR.\& One or more components can be added to the new group by
passing \fB--member\fR and one or more tags can be assigned to the group by
passing \fB--tag\fR.\& Finally, the group can be set to be mutually exclusive with
another group by passing \fB--exclusive-group\fR.\&
.PP
In the second form of the command, a file containing the payload data is
passed.\& This is convenient in cases of dealing with many groups at once.\&
.PP
In the third form of the command, the payload data is read from standard
input.\&
.PP
This command sends one or more POST requests to SMD'\&s /groups endpoint.\&
.PP
This command accepts the following options:
.PP
\fB-d, --description\fR \fIdescription\fR
.RS 4
Specify a brief description of the group.\&
.PP
Default: \fBThe <group_name> group\fR
.PP
.RE
\fB-e, --exclusive-group\fR \fIgroup_name\fR
.RS 4
Specify a single group that the specified group will be mutually
exclusive with.\& In other words, components in this group cannot also be
a member of the specified exclusive group.\&
.PP
.RE
\fB-m, --member\fR \fIxname\fR,.\&.\&.\&
.RS 4
One or more component IDs (xnames) to add to the group.\& For multiple
components, either this flag can be specified multiple times or this
flag can be specified once and multiple component IDs can be specified,
separated by commas.\&
.PP
.RE
\fB-f, --payload\fR \fIfile\fR
.RS 4
Specify a file containing the data to send to SMD.\& The format of this
file depends on \fI--payload-format\fR and is \fIjson\fR by default.\& If \fB-\fR is
used as the argument to \fI-f\fR, the command reads the payload data from
standard input.\&
.PP
.RE
\fB--payload-format\fR \fIformat\fR
.RS 4
Format of the file used with \fI-f\fR.\& If unspecified, the payload format is
\fIjson\fR by default.\& Supported formats are: \fIyaml\fR.\&
.PP
.RE
\fB--tag\fR \fItag\fR,.\&.\&.\&
.RS 4
One or more tags to assign to the group.\& For multiple tags, either this
flag can be specified multiple times or this flag can be specified once
and multiple tags can be specified, separated by commas.\&
.PP
.RE
.RE
\fBdelete\fR [--force] \fIgroup_name\fR.\&.\&.\&
.br
\fBdelete\fR [--force] -f \fIfile\fR [--payload-format \fIformat\fR]
.br
\fBdelete\fR [--force] -f \fI-\fR [--payload-format \fIformat\fR]
.RS 4
Delete one or more groups in SMD.\& Unless \fB--force\fR is passed, the user is
asked to confirm deletion.\&
.PP
In the first form of the command, one or more group labels can be specified
to delete one or more groups.\&
.PP
In the second form of the command, a file containing the payload data is
passed.\& This is convenient in cases of dealing with many groups at once.\&
.PP
In the third form of the command, the payload data is read from standard
input.\&
.PP
This command sends one or more DELETE requests to SMD'\&s /groups endpoint.\&
.PP
This command accepts the following options:
.PP
\fB--force\fR
.RS 4
Do not ask the user to confirm deletion.\& Use with caution.\&
.PP
.RE
\fB-f, --payload\fR \fIfile\fR
.RS 4
Specify a file containing the data to send to SMD.\& The format of this
file depends on \fI--payload-format\fR and is \fIjson\fR by default.\& If \fB-\fR is
used as the argument to \fI-f\fR, the command reads the payload data from
standard input.\&
.PP
.RE
\fB--payload-format\fR \fIformat\fR
.RS 4
Format of the file used with \fI-f\fR.\& If unspecified, the payload format is
\fIjson\fR by default.\& Supported formats are: \fIyaml\fR.\&
.PP
.RE
.RE
\fBget\fR [--name \fIname\fR,.\&.\&.\&] [--tag \fItag\fR,.\&.\&.\&]
.RS 4
Get group information for all groups in SMD or for a subset, specified by
filters.\&
.PP
This command sends a GET to SMD'\&s /groups endpoint.\&
.PP
This command accepts the following options:
.PP
\fB--name\fR \fIgroup_name\fR,.\&.\&.\&
.RS 4
One or more group names to filter groups by.\& For multiple groups names,
either this flag can be specified multiple times or this flag can be
specified once and multiple group names can be specified, separated by
commas.\&
.PP
.RE
\fB--tag\fR \fItag\fR,.\&.\&.\&
.RS 4
One or more tags to filter groups by.\& For multiple tags, either this
flag can be specified multiple times or this flag can be specified once
and multiple tags can be specified, separated by commas.\&
.PP
.RE
.RE
\fBupdate\fR [--description \fIdescription\fR] [--tag \fItag\fR,.\&.\&.\&] \fIgroup_name\fR
.br
\fBupdate\fR -f \fIfile\fR [--payload-format \fIformat\fR]
.RS 4
Update one or more existing groups in SMD.\& If the group does not already
exist, this command will fail.\&
.PP
In the first form of the command, a \fIgroup_name\fR is required as well as at
least one of \fB--description\fR or \fB--tag\fR.\&
.PP
In the second form of the command, a file containing the payload data is
passed.\& This is convenient in cases of dealing with many groups at once.\&
.PP
In the third form of the command, the payload data is read from standard
input.\&
.PP
This command sends a PATCH  request to SMD'\&s /groups endpoint.\&
.PP
This command accepts the following options:
.PP
\fB-d, --description\fR \fIdescription\fR
.RS 4
Specify a brief description of the group.\&
.PP
.RE
\fB-f, --payload\fR \fIfile\fR
.RS 4
Specify a file containing the data to send to SMD.\& The format of this
file depends on \fI--payload-format\fR and is \fIjson\fR by default.\& If \fB-\fR is
used as the argument to \fI-f\fR, the command reads the payload data from
standard input.\&
.PP
.RE
\fB--payload-format\fR \fIformat\fR
.RS 4
Format of the file used with \fI-f\fR.\& If unspecified, the payload format is
\fIjson\fR by default.\& Supported formats are: \fIyaml\fR.\&
.PP
.RE
\fB--tag\fR \fItag\fR,.\&.\&.\&
.RS 4
One or more tags to assign to the group.\& For multiple tags, either this
flag can be specified multiple times or this flag can be specified once
and multiple tags can be specified, separated by commas.\& Passing this
flag will \fBreplace\fR any existing tags, so be sure any existing tags that
need to be kept are passed to this flag.\&
.PP
.RE
.RE
.SS group member
.PP
Manage SMD group membership.\& For general group management, see \fBgroup\fR.\&
.PP
Subcommands for this command are as follows:
.PP
\fBadd\fR \fIgroup_name\fR \fIxname\fR.\&.\&.\&
.RS 4
Add one or more components to an existing SMD group.\&
.PP
This command sends one or more POST requests to the members subendpoint
under SMD'\&s /groups endpoint.\&
.PP
.RE
\fBdelete\fR \fIgroup_name\fR \fIxname\fR.\&.\&.\&
.RS 4
Delete one or more components from an existing SMD group.\&
.PP
This command sends one or more DELETE requests to the members subendpoint
under SMD'\&s /groups endpoint.\&
.PP
.RE
\fBget\fR \fIgroup_name\fR
.RS 4
Get members of an SMD group.\&
.PP
This command sends a GET request to the members subendpoint under SMD'\&s
/groups endpoint.\&
.PP
.RE
.SH AUTHOR
.PP
Written by Devon T.\& Bautista and maintained by the OpenCHAMI developers.\&
.PP
