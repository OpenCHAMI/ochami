.\" Generated by scdoc 1.11.3
.\" Complete documentation for this program is not available as a GNU info page
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.nh
.ad l
.\" Begin generated content:
.TH "OCHAMI-DISCOVER" "1" "2024-11-22" "OpenCHAMI" "Manual Page for ochami-discover"
.PP
.SH NAME
.PP
ochami-discover - Populate SMD using a file
.PP
.SH SYNOPSIS
.PP
ochami discover [OPTIONS] -f \fIfile\fR [--payload-format \fIformat\fR]
.PP
.SH DESCRIPTION
.PP
Sometimes, discovery via Redfish may not be possible or feasible using dynamic
methods (e.\&g.\& no Redfish support), or storing node data in a user-friendly file
that can be used to populate SMD is preferred.\& This command provides a way to
use a file to emulate the SMD discovery process in a static way without
performing the actual discovery via Redfish.\&
.PP
A payload file is required (or the data can be read from standard input), and it
can be passed via \fB-f\fR/\fB--payload\fR.\& The format of this file is JSON by default,
but \fB--payload-format\fR can be used to specify a different format.\&
.PP
The file contains a list of "nodes", each with its own configuration (see
\fBPAYLOAD FORMAT\fR).\& The \fBdiscover\fR command reads this data and creates the SMD
RedfishEndpoints, EthernetInterfaces, Components, and groups data in SMD
corresponding to each node.\& It also creates Components corresponding to each
node'\&s BMC which corresponds to each RedfishEndpoint created.\&
.PP
This command accepts the following options:
.PP
\fB-f, --payload\fR \fIfile\fR
.RS 4
This option is mandatory.\&
.PP
Specify a file containing the data to send to SMD.\& The format of this
file depends on \fI--payload-format\fR and is \fIjson\fR by default.\& If \fB-\fR is
used as the argument to \fI-f\fR, the command reads the payload data from
standard input.\&
.PP
.RE
\fB--payload-format\fR \fIformat\fR
.RS 4
Format of the file used with \fI-f\fR.\& If unspecified, the payload format is
\fIjson\fR by default.\& Supported formats are: \fIyaml\fR.\&
.PP
.RE
.SH PAYLOAD FORMAT
.PP
The format of the payload is a \fBnodes\fR object containing an array of node data.\&
An example of such an array containing one node in YAML format is as follows:
.PP
.nf
.RS 4
nodes:
- name: node01
  nid: 1
  xname: x1000c1s7b0n0
  bmc_mac: de:ca:fc:0f:ee:ee
  bmc_ip: 172\&.16\&.0\&.101
  group: compute
  interfaces:
  - mac_addr: de:ad:be:ee:ee:f1
    ip_addrs:
    - name: internal
      ip_addr: 172\&.16\&.0\&.1
  - mac_addr: de:ad:be:ee:ee:f2
    ip_addrs:
    - name: external
      ip_addr: 10\&.15\&.3\&.100
  - mac_addr: 02:00:00:91:31:b3
    ip_addrs:
    - name: HSN
      ip_addr: 192\&.168\&.0\&.1
.fi
.RE
.PP
A description of each key in the above is as follows:
.PP
.PD 0
.IP \(bu 4
\fBname\fR - A short name identifying the node.\& This is used as the
.PD
RedfishEndpoint name and is used to generate a short description of the node for
the description field in EthernetInterfaces it creates.\&
.PD 0
.IP \(bu 4
\fBnid\fR - The node ID number unique to the node.\& This used in the NID field in
.PD
the Component that is created for the node.\&
.PD 0
.IP \(bu 4
\fBxname\fR - The xname unique to the node.\& It is important that this is a node
.PD
xname (see \fBXNAMES\fR) because this is used to calculate a BMC xname for the
RedfishEndpoint and Component structures created for the BMC for the node.\& This
is used as the unique identifier for the node within the Component that gets
created for node.\&
.PD 0
.IP \(bu 4
\fBbmc_mac\fR - MAC address of node'\&s BMC.\&
.IP \(bu 4
\fBbmc_ip\fR - Desired IP address of node'\&s BMC.\&
.IP \(bu 4
\fBgroup\fR - Optional group to add node to.\& This will get created during
.PD
discovery if it does not exist.\&
.PD 0
.IP \(bu 4
\fBinterfaces\fR - A list of network interfaces for the node.\&
.RS 4
.IP \(bu 4
\fBmac_addr\fR - MAC address of network interface.\&
.IP \(bu 4
\fBip_addrs\fR - List of IP addresses assigned to interface.\&
.RS 4
.IP \(bu 4
\fBname\fR - Short name identifying the network for the IP address.\&
.IP \(bu 4
\fBip_addr\fR - IP address for interface.\&
.PD
.PP
.RE
.RE
.SH XNAMES
.PP
An \fBxname\fR is a structured and succinct way to identify a node based on its type
and location.\& Information goes from general to specific from left to right.\& Each
of the letters in an xname identify a type while the number to the right of each
character identifies the number of that type.\& For instance:
.PP
.nf
.RS 4
x1000c1s7b0n0
^    ^ ^ ^ ^
|    | | | `- Node 0
|    | | +--- BMC 0
|    | +----- Compute Module 7
|    +------- Chassis 1
+------------ Cabinet 1000
.fi
.RE
.PP
The only important parts as far as the \fBdiscover\fR command is concerned are the
\fBb\fR (BMC) and \fBn\fR (node) segments.\& If an xname ends with an \fBn\fR segment, it is a
node xname.\& If an xname ends with a \fBb\fR segment, it is a BMC xname.\&
.PP
The concepts of xnames comes from HPE/Cray.\& See the following for more
information on xnames: https://github.\&com/Cray-HPE/hms-xname
.PP
.SH AUTHOR
.PP
Written by Devon T.\& Bautista and maintained by the OpenCHAMI developers.\&
.PP
